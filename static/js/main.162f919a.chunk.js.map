{"version":3,"sources":["components/Champion/index.js","App.js","serviceWorker.js","index.js"],"names":["Champion","this","props","data","image","group","full","console","log","className","passive","name","spells","Component","cookies","Cookies","championJson","options","Object","keys","map","value","label","App","state","championsSelectedBlue","get","championsSelectedRed","handleChange","team","selectedOption","setState","set","path","onChange","isMulti","champSelected","key","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRA4BeA,G,2LAzBC,IAAD,EACaC,KAAKC,MAAMC,KAAKC,MAAhCC,EADG,EACHA,MAAOC,EADJ,EACIA,KACf,MAAM,SAAN,OAAgBD,EAAhB,YAAyBC,K,+BAIzBC,QAAQC,IAAIP,KAAKC,MAAMC,MAEvB,OACE,wBAAIM,UAFU,mBAGZ,yBAAKA,UAAU,OACb,wBAAIA,UAAU,SACZ,wCAAcR,KAAKC,MAAMC,KAAKO,QAAQC,MACtC,kCAAQV,KAAKC,MAAMC,KAAKS,OAAO,GAAGD,MAClC,kCAAQV,KAAKC,MAAMC,KAAKS,OAAO,GAAGD,MAClC,kCAAQV,KAAKC,MAAMC,KAAKS,OAAO,GAAGD,MAClC,kCAAQV,KAAKC,MAAMC,KAAKS,OAAO,GAAGD,a,GAjBvBE,c,eCKjBC,EAAU,I,MAAIC,GAEpBR,QAAQC,IAAIQ,EAAab,KAAb,QACZ,IAAMc,EAAUC,OAAOC,KAAKH,EAAab,MAAMiB,IAAI,SAAAT,GAAU,MAAO,CAACU,MAAOV,EAAMW,MAAOX,KAqD1EY,E,2MAnDbC,MAAQ,CACNC,sBAAuBX,EAAQY,IAAI,yBACnCC,qBAAsBb,EAAQY,IAAI,yB,EAEpCE,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrB,EAAKC,SAAL,0CAAqCF,GAASC,IAC9CvB,QAAQC,IAAIqB,GACZtB,QAAQC,IAAIsB,GACZhB,EAAQkB,IAAR,2BAAgCH,GAAQC,EAAgB,CAAEG,KAAM,MAChE1B,QAAQC,IAAR,mBAAgCsB,K,wEAExB,IAAD,EACiD7B,KAAKuB,MAArDG,EADD,EACCA,qBAAsBF,EADvB,EACuBA,sBAE9B,OACE,yBAAKhB,UAAU,WACb,yBAAKA,UAAU,mBACb,yCACA,kBAAC,IAAD,CACEY,MAAOI,EACPS,SAAUjC,KAAK2B,aAAa,QAC5BX,QAASA,EACTkB,SAAO,EACP1B,UAAU,WAEZ,wBAAIA,UAAU,qBACXgB,EAAsBL,IAAI,SAAAgB,GACzB,OAAO,kBAAC,EAAD,CAAUP,KAAM,OAAQ1B,KAAMa,EAAab,KAAKiC,EAAcf,OAAQgB,IAAKD,EAAcf,YAItG,yBAAKZ,UAAU,kBACb,wCACA,kBAAC,IAAD,CACEY,MAAOM,EACPO,SAAUjC,KAAK2B,aAAa,OAC5BX,QAASA,EACTkB,SAAO,EACP1B,UAAU,WAEZ,wBAAIA,UAAU,qBACXkB,EAAqBP,IAAI,SAAAgB,GACxB,OAAO,kBAAC,EAAD,CAAUP,KAAM,MAAO1B,KAAMa,EAAab,KAAKiC,EAAcf,OAAQgB,IAAKD,EAAcf,iB,GA3C3FiB,IAAMzB,WCCJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.162f919a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Champion extends Component {\n  buildImage() {\n    const { group, full } = this.props.data.image;\n    return `./img/${group}/${full}`\n  }\n  render() {\n    // console.log(this.buildImage());\n    console.log(this.props.data)\n    const classNames = `list-group-item`;\n    return (\n      <li className={classNames}>\n        <div className=\"row\">\n          <ul className=\"col-7\">\n            <li>Passive: {this.props.data.passive.name}</li>\n            <li>Q: {this.props.data.spells[0].name}</li>\n            <li>W: {this.props.data.spells[1].name}</li>\n            <li>E: {this.props.data.spells[2].name}</li>\n            <li>R: {this.props.data.spells[3].name}</li>\n          </ul> \n        </div>\n      </li>\n    );\n  }\n}\n\n\nexport default Champion","import React, { Component } from 'react';\nimport './App.css';\n\nimport Champion from './components/Champion';\nimport championJson from \"./dragontail-9.18.1/9.18.1/data/en_US/championFull.json\";\nimport Select from 'react-select';\nimport Cookies from 'universal-cookie';\nconst cookies = new Cookies();\n\nconsole.log(championJson.data['Aatrox']);\nconst options = Object.keys(championJson.data).map(name => { return {value: name, label: name} })\nclass App extends React.Component {\n  state = {\n    championsSelectedBlue: cookies.get('championsSelectedBlue'),\n    championsSelectedRed: cookies.get('championsSelectedRed')\n  };\n  handleChange = team => selectedOption => {\n    this.setState({ [`championsSelected${team}`]: selectedOption });\n    console.log(team)\n    console.log(selectedOption)\n    cookies.set(`championsSelected${team}`, selectedOption, { path: '/' });\n    console.log(`Option selected:`, selectedOption);\n  };\n  render() {\n    const { championsSelectedRed, championsSelectedBlue } = this.state;\n\n    return (\n      <div className=\"App row\">\n        <div className=\"col-6 blue-team\">\n          <h1>Blue Team</h1>\n          <Select\n            value={championsSelectedBlue}\n            onChange={this.handleChange('Blue')}\n            options={options}\n            isMulti\n            className=\"col-12\"\n          />\n          <ul className=\"list-group col-12\">\n            {championsSelectedBlue.map(champSelected => {\n              return <Champion team={\"blue\"} data={championJson.data[champSelected.value]} key={champSelected.value}></Champion>\n            })}  \n          </ul>\n        </div>\n        <div className=\"col-6 red-team\">\n          <h1>Red Team</h1>\n          <Select\n            value={championsSelectedRed}\n            onChange={this.handleChange('Red')}\n            options={options}\n            isMulti\n            className=\"col-12\"\n          />            \n          <ul className=\"list-group col-12\">\n            {championsSelectedRed.map(champSelected => {\n              return <Champion team={\"red\"} data={championJson.data[champSelected.value]} key={champSelected.value}></Champion>\n            })}  \n          </ul>\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}